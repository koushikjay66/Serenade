name: Build and Deploy the Application

on:
  push:
    branches: [ "feature/ci-cd" ]

env:
                                                   # file, e.g. .aws/task-definition.json
    ARTIFACTORY_IMAGE_TAG: ${{ github.sha }}  


permissions:
  contents: read

jobs:
  Build:
    name: Building Images
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and export
      uses: docker/build-push-action@v5
      with:
          context: .
          tags: ${{ env.ARTIFACTORY_IMAGE_TAG }}:latest
          outputs: type=docker,dest=/tmp/${{ vars.ECR_REPOSITORY }}.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
          name: serenade
          path: /tmp/${{ vars.ECR_REPOSITORY }}.tar
  
  publish: 
      name: Publish to ECR
      runs-on : ubuntu-latest
      needs: [Build]
      outputs:
        image: ${{ steps.push-image.outputs.image }}
      steps:
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: serenade
              path: /tmp
          - name: Load image
            run: |
              docker load --input /tmp/${{ vars.ECR_REPOSITORY }}.tar
              docker tag ${{ env.ARTIFACTORY_IMAGE_TAG }} ${{ steps.login-ecr.outputs.registry}}/${{ vars.ECS_SERVICE_NAME }}:latest


          - name: Publishing to ECR
            id: push-image
            run: | 
                docker push ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECS_SERVICE_NAME }}:latest
                echo "image=${{ steps.login-ecr.outputs.registry }}/${{ vars.ECS_SERVICE_NAME }}"  >> $GITHUB_OUTPUT
  deploy:
      name: Deploy To ECS
      runs-on : ubuntu-latest
      needs: [publish]
      steps:
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
          - name: Login to Amazon ECR (Again ..... !!)
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          
          - name: AWS ECS Download Task Definition
            id: download-ecs-task-definition
            run: |
              aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: task-definition.json
              container-name: serenade-web
              image: ${{ needs.push-image.outputs.image }}

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ vars.ECS_SERVICE_NAME }}
              cluster: ${{ vars.ECS_CLUSTER_NAME }}
              wait-for-service-stability: true
    
