name: Build and Deploy the Application

on:
  push:
    branches: [ "feature/ci-cd" ]

env:
  AWS_REGION: eu-central-1                 
  ECR_REPOSITORY: serenade 
  IMAGE_TAG: latest
  ECS_TASK_DEFINITION: serenade-dev-task-defination:1
  ECS_SERVICE_NAME: serenade-dev-service
  ECS_CLUSTER_NAME: DevCluster2

permissions:
  contents: read

jobs:
  Build:
    name: Building Images
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and export
      uses: docker/build-push-action@v5
      with:
          context: .
          tags: 451950674577.dkr.ecr.eu-central-1.amazonaws.com/serenade:latest
          outputs: type=docker,dest=/tmp/serenade.tar
    #https://docs.docker.com/build/ci/github-actions/share-image-jobs/
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
          name: serenade
          path: /tmp/serenade.tar
  
  publish: 
      name: Publish to ECR
      runs-on : ubuntu-latest
      needs: [Build]
      steps:
          - name: Download artifact
            uses: actions/download-artifact@v3
            with:
              name: serenade
              path: /tmp
          - name: Load image
            run: |
              docker load --input /tmp/serenade.tar
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          - name: Publishing to ECR
            id: push-image
            run: | 
                docker push 451950674577.dkr.ecr.eu-central-1.amazonaws.com/serenade:latest
                echo "image=451950674577.dkr.ecr.eu-central-1.amazonaws.com/serenade:latest"  >> $GITHUB_OUTPUT
          #https://github.com/aws-actions/amazon-ecs-deploy-task-definition
          #https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service
          - name: AWS ECS Download Task Definition
            id: download-ecs-task-definition
            run: |
              aws ecs describe-task-definition --task-definition PrivateIntegrationsStackPrivateIntegrationsTutorialServiceTaskDefB5E162FC --query taskDefinition > task-definition.json

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: task-definition.json
              container-name: web
              image: ${{ steps.push-image.outputs.image }}

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: serenade-cloudformation-stack-PrivateIntegrationsTutorialService73010F72-cwz6ciYKZTEz
              cluster: serenade-cloudformation-stack-PrivateIntegrationsTutorialCluster09C95435-Ggi3UrABDI56
              wait-for-service-stability: true
    
